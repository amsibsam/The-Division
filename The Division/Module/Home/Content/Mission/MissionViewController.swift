    //
//  MissionViewController.swift
//  The Division
//
//  Created MTMAC16 on 16/08/18.
//  Copyright © 2018 bism. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class MissionViewController: LandscapeViewController {
    @IBOutlet var tableViewMission: UITableView!
    
	var presenter: MissionPresenterProtocol?
    var missionState: MissionState!
    var missions: [Mission] = []
    var agents: [Member] = []
    var selectedAgent: Member?
    var tfAgent: UITextField?
    
    let agentPicker = UIPickerView()

    override func viewDidLoad() {
        super.viewDidLoad()
        setupTableView()
        presenter?.getMission(with: missionState)
        presenter?.getAllAgent()
        navigationController?.navigationBar.isHidden = true
    }
    
    private func setupTableView() {
        tableViewMission.delegate = self
        tableViewMission.dataSource = self
        tableViewMission.tableFooterView = UIView()
        tableViewMission.estimatedRowHeight = UITableViewAutomaticDimension
    }
    
    private func setMissionToInProgress(at indexPath: IndexPath) {
        var selectedMission = missions[indexPath.row]
        selectedMission.state = .InProgress
        presenter?.editMission(with: selectedMission)
        missions.remove(at: indexPath.row)
        tableViewMission.beginUpdates()
        tableViewMission.deleteRows(at: [indexPath], with: .left)
        tableViewMission.endUpdates()
    }
    
}

extension MissionViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return missions.count
    }
    
    func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableViewAutomaticDimension
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 44
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let header = tableView.dequeueReusableCell(withIdentifier: "ContentHeaderCell") as! ContentHeaderCell
        
        header.bindDataToView(in: .Mission, with: missionState.rawValue, and: missions.count)
        header.onAddDidTap = {
            self.presenter?.presentCreateMissionPopup(from: self, with: self.agents, completion: { (title, description, assignee, objectives) in
                self.presenter?.createMission(with: title, description: description, assignee: assignee, objective: objectives)
            })
        }
        
        return header
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let mission = missions[indexPath.row]
        let cell = tableView.dequeueReusableCell(withIdentifier: "MissionCell", for: indexPath) as! MissionCell
        cell.bindDataToView(with: mission)
        return cell
    }
}

extension MissionViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        if missionState == .New {
            presenter?.openMissionDetail(from: self, with: missions[indexPath.row])
        }
    }
}

extension MissionViewController: MissionViewProtocol {
    func onCreateMissionSucceeded(with mission: Mission) {
        self.missions.insert(mission, at: 0)
        tableViewMission.beginUpdates()
        tableViewMission.insertRows(at: [IndexPath(row: 0, section: 0)], with: .right)
        tableViewMission.endUpdates()
    }
    
    func onGetMissionSucceeded(with missions: [Mission]) {
        self.missions.append(contentsOf: missions)
        tableViewMission.reloadData()
    }
    
    func onGetAllAgentSucceed(with agents: [Member]) {
        self.agents.append(contentsOf: agents)
        selectedAgent = self.agents.first
        agentPicker.reloadAllComponents()
    }
}

extension MissionViewController: UIPickerViewDataSource {
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
        
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return agents.count
    }
    
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        return agents[row].name
    }
}
    
extension MissionViewController: UIPickerViewDelegate {
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        selectedAgent = agents[row]
        tfAgent?.text = selectedAgent?.name
    }
}
