//
//  MissionRouter.swift
//  The Division
//
//  Created MTMAC16 on 16/08/18.
//  Copyright © 2018 bism. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class MissionRouter: MissionWireframeProtocol {

    weak var viewController: UIViewController?

    static func createModule(with state: MissionState) -> UIViewController {
        // Change to get view from storyboard if not using progammatic UI
        let navigation = AppStoryBoard.Home.instance.instantiateViewController(withIdentifier: Navigation.Mission.rawValue)
        if let view = navigation.childViewControllers.first as? MissionViewController {
            view.missionState = state
            let interactor = MissionInteractor()
            let router = MissionRouter()
            let dataManager = MissionDataManager()
            let presenter = MissionPresenter(interface: view, interactor: interactor, router: router)
            
            view.presenter = presenter
            dataManager.interactor = interactor
            interactor.dataManager = dataManager
            interactor.presenter = presenter
            router.viewController = view
        }
        
        return navigation
    }
    
    func openMissionDetail(from view: MissionViewProtocol, with mission: Mission) {
        let missionDetailVC = MissionDetailRouter.createModule(with: mission)
        if let sourceView = view as? UIViewController {
            sourceView.navigationController?.pushViewController(missionDetailVC, animated: true)
        }
    }
    
    func presentCreateMissionPopup(from view: MissionViewProtocol, with agents: [Member], completion: @escaping (String, String, Member, [Objective]) -> Void) {
        if let sourceView = view as? UIViewController {
            if let createMissionPopupVC = AppStoryBoard.Home.instance.instantiateViewController(withIdentifier: HomeViewControllers.CreateMission.rawValue) as? CreateMissioPopupViewController {
                createMissionPopupVC.agents = agents
                createMissionPopupVC.modalPresentationStyle = .overCurrentContext
                createMissionPopupVC.completion = completion
                sourceView.present(createMissionPopupVC, animated: true, completion: nil)
            }
        }
        
    }
}
