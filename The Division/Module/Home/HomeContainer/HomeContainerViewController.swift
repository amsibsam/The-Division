//
//  HomeContainerViewController.swift
//  The Division
//
//  Created MTMAC16 on 14/08/18.
//  Copyright © 2018 bism. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class HomeContainerViewController: UIViewController, HomeContainerViewProtocol {

    @IBOutlet var tablewViewMenu: UITableView!
    @IBOutlet var constraintMenuLeading: NSLayoutConstraint!
    
    var isMenuAppear: Bool = false
    var presenter: HomeContainerPresenterProtocol?

    override var shouldAutorotate: Bool {
        return true
    }
    
    override var supportedInterfaceOrientations: UIInterfaceOrientationMask {
        return UIInterfaceOrientationMask.landscape
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        let value = UIInterfaceOrientationMask.landscape.rawValue
        UIDevice.current.setValue(value, forKey: "orientation")
        
        let gestureClose = UIPanGestureRecognizer(target: self, action: #selector(self.closeMenuAction(_:)))
        tablewViewMenu.addGestureRecognizer(gestureClose)
    }
    
    @objc func closeMenuAction(_ sender: UIPanGestureRecognizer) {
        let translation = sender.translation(in: view)
        
        tablewViewMenu.slide(horizontalTranslation: calculateClosingTranslation(xPosition: translation.x, gestureState: sender.state))
    }
    
    @IBAction func onGestureReaction(_ sender: UIScreenEdgePanGestureRecognizer) {
        let translation = sender.translation(in: view)
        
        tablewViewMenu.slide(horizontalTranslation: calculateOpeningTranslation(xPosition: translation.x, gestureState: sender.state))
    }
    
    @IBAction func showDrawer(_ sender: UIButton) {
        if isMenuAppear {
            tablewViewMenu.slide(horizontalTranslation: -self.tablewViewMenu.frame.width)
        } else {
            tablewViewMenu.slide(horizontalTranslation: self.tablewViewMenu.frame.width)
        }
        
        isMenuAppear = !isMenuAppear
    }
    
    private func calculateOpeningTranslation(xPosition: CGFloat, gestureState: UIGestureRecognizerState) -> CGFloat {
        var xTranslation = xPosition > tablewViewMenu.frame.width ? tablewViewMenu.frame.width : xPosition
        if xTranslation < (tablewViewMenu.frame.width / 3) && gestureState == .ended {
            xTranslation = -xPosition
            isMenuAppear = false
        } else if xTranslation > (tablewViewMenu.frame.width / 3) && gestureState == .ended {
            xTranslation = tablewViewMenu.frame.width
            isMenuAppear = true
        }
        
        return xTranslation
    }
    
    private func calculateClosingTranslation(xPosition: CGFloat, gestureState: UIGestureRecognizerState) -> CGFloat {
        var xTranslation = xPosition > 0 ? 0 : xPosition
        
        if xTranslation > (-tablewViewMenu.frame.width / 3) && gestureState == .ended {
            xTranslation = 0
            isMenuAppear = true
        } else if xTranslation < (-tablewViewMenu.frame.width / 3) && gestureState == .ended {
            xTranslation = -tablewViewMenu.frame.width
            isMenuAppear = false
        }
        
        return tablewViewMenu.frame.width + xTranslation
    }
}
