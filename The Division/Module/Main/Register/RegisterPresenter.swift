//
//  RegisterPresenter.swift
//  The Division
//
//  Created MTMAC16 on 31/08/18.
//  Copyright © 2018 bism. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class RegisterPresenter: RegisterPresenterProtocol {

    weak private var view: RegisterViewProtocol?
    var interactor: RegisterInteractorInputProtocol?
    private let router: RegisterWireframeProtocol

    init(interface: RegisterViewProtocol, interactor: RegisterInteractorInputProtocol?, router: RegisterWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    
    func register(name: String, password: String, passwordConfirmation: String, email: String) {
        func validateEmptyData() -> Bool {
            return !name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty && !password.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty && !passwordConfirmation.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty && !email.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty
        }
        
        func validatePasswordMatch() -> Bool {
            return password == passwordConfirmation
        }
        
        view?.showLoading()
        if validateEmptyData() {
            if validatePasswordMatch() {
                interactor?.register(name: name, password: password, passwordConfirmation: passwordConfirmation, email: email)
                view?.dismissLoading()
            } else {
                view?.onRegisterError(with: "Please check your password")
                view?.dismissLoading()
            }
        } else {
            view?.onRegisterError(with: "Please fill all the data")
            view?.dismissLoading()
        }
    }

}

extension RegisterPresenter: RegisterInteractorOutputProtocol {
    func onRegisterSucceeded() {
        view?.onRegisterSucceeded()
    }
    
    func onRegisterError(with message: String) {
        view?.onRegisterError(with: message)
    }
}
